如何轻松写出正确的链表代码，下面是总结的几个技巧：


1、理解指针或引用的含义
2、警惕指针丢失和内存泄露
3、利用哨兵简化难度

如果不使用哨兵，对于链表的插入，需要对插入的第一个节点做特殊处理。
如果不使用哨兵，对于链表的删除，需要对删除的最后一个节点做特殊处理。

空链表：  head == null，head表示头结点指针，指向链表中的第一个节点

添加哨兵：在任何时候，不管链表是否为空，head指针都会一直指向哨兵节点。哨兵节点不存储数据，且会一直存在。

因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑了。


4、重点留意边界条件处理：边界条件：
        1.如果链表为空，代码是否正常工作？
        2.链表只包含一个节点，代码是否正常工作？
        3.链表只包含两个节点，代码是否正常工作？
        4.代码逻辑在处理头结点和尾结点时，是否正常工作？
        
5、举例画图，辅助思考
        你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉到思路清晰很多
        
6、多些多练，没有捷径



下面是5个常见的链表操作，熟练多写几遍

1、单链表反转
2、链表中环的检测
3、两个有序的链表合并
4、删除链表的倒数第n个结点
5、求链表的中间结点


练习题LeetCode对应编号:206，141，21，19，876
